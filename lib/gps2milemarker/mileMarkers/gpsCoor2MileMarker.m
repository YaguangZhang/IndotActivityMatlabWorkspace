function [roadName, mile, nearestSegs, nearestDist, nearestSegName] = ...
    gpsCoor2MileMarker(lat, lon, flagPlotResults)
% GPSCOOR2MILEMARKER Convert GPS coordinates on INDOT roads (centerline
% 2019) to road name and mile marker.
%
% Please remember to load in INDOT mile marker database and road database
% first.
%
% Inputs:
%   - lat, lon
%     The GPS coordinates for the point for which we want to get the high
%     way road name and mile marker.
%   - flagPlotResults
%     Optional. Default to false. Set this to be true to plot debugging
%     figures from findNearestRoadSeg.m.
%
% Implicit inputs (cached in the base workspace):
%   - indotMileMarkers, indotRoads
%     Structures storing INDOT mile markers and roads respectively. Can be
%     generated by running scripts loadIndotMileMarkers.m and
%     loadIndotRoads.m respectively.
%   - MILE_MARKER_PROJ, ROAD_PROJ,
%     Specifies the parameters for converting GPS coordinates to UTM and
%     vice versa, for the mile markers and roads, respectively. They will
%     be automatically generated if loadIndotMileMarkers and loadIndotRoads
%     are run.
%   - INDOT_MILE_MARKERS_ROADNAME_LABELS
%     The road names for indotMileMarkers. This is optional but will
%     improve the speed of this function dramatically. It can be generated
%     by this function itself if it's not provided.
%
% Outputs:
%   - roadName
%     The road name for the input point.
%   - mile
%     A float value. The mile marker for the input point.
%   - nearestSegs
%     A struct array for the neareast road segment.
%   - nearestDist
%     The distance from the input point to the neareast road segment.
%   - nearestSegName
%     For debugging. The road name of the nearest road segment. This is
%     populated only when the nearest road segment is found, it has a road
%     name, and the road name for the input point is invalid (normally
%     because no mile marker with the same road name label can be found).
%
% Yaguang Zhang, Purdue, 02/02/2021

if ~exist('flagPlotResults', 'var')
    flagPlotResults = false;
end

nearestSegName = '';

if ~exist('indotRoads', 'var') || ~exist('ROAD_PROJ', 'var')
    if exist('indotRoads', 'var') || exist('ROAD_PROJ', 'var')
        warning('GPS2MILEMARKER:roadCenterlineNotLoaded', ...
            ['Not both indotRoads and ROAD_PROJ ', ...
            'are specified! We will reload both of them!'])
    end
    if evalin('base', ...
            '~exist(''indotRoads'',''var'')')
        evalin('base', 'loadIndotRoads');
    end
    indotRoads = evalin('base', 'indotRoads');
    ROAD_PROJ = evalin('base', 'ROAD_PROJ');
end

if ~exist('indotMileMarkers', 'var') || ~exist('MILE_MARKER_PROJ', 'var')
    if exist('indotMileMarkers', 'var') || exist('MILE_MARKER_PROJ', 'var')
        warning('GPS2MILEMARKER:milemarkersNotLoaded', ...
            ['Not both indotMileMarkers and MILE_MARKER_PROJ ', ...
            'are specified! We will reload both of them!'])
    end
    if evalin('base', ...
            '~exist(''indotMileMarkers'',''var'')')
        evalin('base', 'loadIndotMileMarkers');
    end
    indotMileMarkers = evalin('base', 'indotMileMarkers');
    MILE_MARKER_PROJ = evalin('base', 'MILE_MARKER_PROJ');
end

roadName = '';
mile = nan;

% Project the coordinates into UMT system.
[xRoad, yRoad] = projfwd(ROAD_PROJ, lat, lon);
[xMileMaker, yMileMaker] = projfwd(MILE_MARKER_PROJ, lat, lon);

% First, we need to know the name of the road we are on.

% Find the nearest road segment(s).
[nearestSegs, nearestDist] = findNearestRoadSeg(xRoad, yRoad, ...
    indotRoads, flagPlotResults);

% If no nearest road segment is found, print an error.
if isempty(nearestSegs)
    warning('GPS2MILEMARKER:noNearestRoadSeg', ...
        'Couldn''t find the nearest road segment!');
    return
end

% Get their road name(s).
roadName = getRoadNamesForRoadSegs(nearestSegs);

% It's not likely that the input point has more than one "nearest"
% segments. When this happens, we will check the road names for those
% segments and print a warning if they don't match.
if ~all(strcmp(roadName, roadName{1}))
    warning('GPS2MILEMARKER:mutipleNearestSegsFound', ...
        'Multiple road name candidates discovered!');
end
roadName = roadName{1};

% Next we need to compute the mile marker according to the road name we've
% gotten.
mileMarkersOnThisRoad = getMileMarkersByRoadName( ...
    roadName, indotMileMarkers);

% Get the nearest 2 mile markers. Here we only use them to estimate the
% mile post for the input point.
locationsMileMarkersOnThisRoad = zeros(length(mileMarkersOnThisRoad),2);
for idx = 1:length(mileMarkersOnThisRoad)
    locationsMileMarkersOnThisRoad(idx,1) = mileMarkersOnThisRoad(idx).X;
    locationsMileMarkersOnThisRoad(idx,2) = mileMarkersOnThisRoad(idx).Y;
end
distMileMarkers = pdist2([xMileMaker, yMileMaker], ...
    locationsMileMarkersOnThisRoad);
sortedDistMileMarkersWithIndices = sortrows([distMileMarkers', ...
    (1:length(distMileMarkers))'], 1);
try
    nearest2Markers = mileMarkersOnThisRoad(...
        sortedDistMileMarkersWithIndices(1:2,2)...
        );
catch
    warning(['Unable to find any known mile markers for road: ', ...
        roadName]);
    nearestSegName = roadName;
    return;
end

% Get the vector of the 2 markers from the marker with smaller postnumber.
unitMileVector = [nearest2Markers(2).X - nearest2Markers(1).X, ...
    nearest2Markers(2).Y - nearest2Markers(1).Y];
postNumNearest2Markers = nan(2,1);
for idxNearestMM = 1:2
    [~, postNumNearest2Markers(idxNearestMM)] ...
        = getRoadNameFromMileMarker(nearest2Markers(idxNearestMM));
end
if postNumNearest2Markers(1) > postNumNearest2Markers(2)
    unitMileVector = -unitMileVector;
    % Also compute the vector from the marker with smaller postnumber to
    % the input point.
    inputMileVector = [xMileMaker - nearest2Markers(2).X, ...
        yMileMaker - nearest2Markers(2).Y];
else
    inputMileVector = [xMileMaker - nearest2Markers(1).X, ...
        yMileMaker - nearest2Markers(1).Y];
end

% Compute the postnumber for the input point.
mile = min(postNumNearest2Markers) + ...
    dot(inputMileVector, unitMileVector) / ...
    dot(unitMileVector, unitMileVector);

end
% EOF